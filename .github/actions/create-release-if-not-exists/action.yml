name: Create release if not exists and attach APKs
description: Create a release on GH if there is no release found with the same tag, set its name to the tag, and attach APKs

inputs:
  prerelease:
    description: 'Is this a pre-release?'
    required: true
    type: boolean
  apk_paths:
    description: 'Comma-separated list of APK paths to upload'
    required: false
    type: string
  token:
    description: 'GitHub token'
    required: true
    type: string

runs:
  using: composite
  steps:
    - name: Create release if it does not exist and upload APKs
      shell: bash
      run: |
        set -e

        TAG_NAME="${GITHUB_REF#refs/tags/}"
        echo "Using tag: $TAG_NAME"

        # Check if the release exists
        RESPONSE=$(curl -s -o response.json -w "%{http_code}" \
          -H "Authorization: token ${{ inputs.token }}" \
          "https://api.github.com/repos/${{ github.repository }}/releases/tags/$TAG_NAME")

        if [[ "$RESPONSE" == "404" ]]; then
          echo "Release not found — creating release..."

          CREATE_RESPONSE=$(curl -s -X POST \
            -H "Authorization: token ${{ inputs.token }}" \
            -H "Accept: application/vnd.github+json" \
            -d @- "https://api.github.com/repos/${{ github.repository }}/releases" <<EOF
          {
            "tag_name": "$TAG_NAME",
            "name": "$TAG_NAME",
            "prerelease": ${{ inputs.prerelease }},
            "generate_release_notes": true
          }
        EOF
        )
        
        echo "$CREATE_RESPONSE" > response.json
        else
        echo "Release already exists — using existing release data"
        fi
        
        RELEASE_ID=$(jq -r '.id' response.json)
      echo "Release ID: $RELEASE_ID"
        
        if [[ -n "${{ inputs.apk_paths }}" ]]; then
        IFS=',' read -r -a APK_ARRAY <<< "${{ inputs.apk_paths }}"
        
        for APK in "${APK_ARRAY[@]}"; do
        APK_PATH=$(echo "$APK" | xargs) # Trim whitespace
        FILENAME=$(basename "$APK_PATH")
        
        echo "Uploading $FILENAME..."
        
        curl -s \
        -X POST \
      -H "Authorization: token ${{ inputs.token }}" \
      -H "Content-Type: application/vnd.android.package-archive" \
        --data-binary @"$APK_PATH" \
        "https://uploads.github.com/repos/${{ github.repository }}/releases/$RELEASE_ID/assets?name=$FILENAME"
        
        echo "$FILENAME uploaded successfully."
        done
        else
        echo "No APK paths provided. Skipping upload."
        fi
