name: Create Release

on:
  workflow_dispatch:
    inputs:
      version:
        description: 'Version for the release (e.g., 1.2.3-rc1)'
        required: true
        type: string

permissions:
  contents: write

jobs:
  release:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up JDK
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: '17'

      # Step 1: Bump Version
      - name: Bump Version
        run: |
          VERSION_FILE=version.properties

          # Log the file contents before modifying
          echo "Current contents of $VERSION_FILE:"
          cat $VERSION_FILE

          # Increment VERSION_CODE by 1
          VERSION_CODE=$(grep 'VERSION_CODE=' $VERSION_FILE | cut -d '=' -f2)
          echo "Current VERSION_CODE: $VERSION_CODE"

          VERSION_CODE=$((VERSION_CODE + 1))
          echo "New VERSION_CODE: $VERSION_CODE"

          # Set VERSION_NAME to the supplied version
          VERSION_NAME=${{ inputs.version }}

          # If the version starts with a 'v', remove it
          if [[ "$VERSION_NAME" == v* ]]; then
            VERSION_NAME="${VERSION_NAME:1}"
          fi
          echo "Setting VERSION_NAME to: $VERSION_NAME"

          # Update the version.properties file
          sed -i "s/^VERSION_CODE=.*/VERSION_CODE=$VERSION_CODE/" $VERSION_FILE 
          sed -i "s/^VERSION_NAME=.*/VERSION_NAME=$VERSION_NAME/" $VERSION_FILE

          # Log the new contents of the version.properties file
          echo "Updated contents of $VERSION_FILE:"
          cat $VERSION_FILE

          # Commit and push changes to version.properties
          git config --global user.name "github-actions"
          git config --global user.email "github-actions@github.com"
          git add $VERSION_FILE
          git commit -m "Bump version to $VERSION_NAME, increment VERSION_CODE to $VERSION_CODE"
          git push origin HEAD

      # Step 2: Create GitHub Release with Tag and Name = Version if it doesn't already exist
      - name: Check if release exists
        run: |
          VERSION=${{ inputs.version }}

          # Check if the version starts with 'v'
          if [[ "$VERSION" =~ ^v ]]; then
            # If it starts with 'v', use the version as is
            TAG_NAME=$VERSION
            RELEASE_NAME=$VERSION
          else
            # If it doesn't start with 'v', append 'v' to the version
            TAG_NAME="v$VERSION"
            RELEASE_NAME="v$VERSION"
          fi

          # Check if the release exists by querying the GitHub API
          RELEASE_EXISTS=$(curl -s \
            -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
            "https://api.github.com/repos/${{ github.repository }}/releases/tags/$TAG_NAME" \
            | grep -o 'Not Found')

          if [ "$RELEASE_EXISTS" == "Not Found" ]; then
            echo "Release not found. Creating release for version $TAG_NAME..."

            # Create GitHub Release with Tag and Name = Version
            curl -s \
              -X POST \
              -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
              -d '{
                "tag_name": "'"$TAG_NAME"'",
                "name": "'"$RELEASE_NAME"'",
                "body": "## Changes\n- Describe the changes in this release.",
                "draft": false,
                "prerelease": false
              }' \
              "https://api.github.com/repos/${{ github.repository }}/releases"

          else
            echo "Release for version $TAG_NAME already exists. Skipping release creation."
          fi



#      # Step 2: Create GitHub Release with Tag and Name = Version
#      - name: Create GitHub Release
#        uses: softprops/action-gh-release@v2
#        with:
#          tag_name: ${{ inputs.version }}
#          name: Release ${{ inputs.version }}
#          body: |
#            ## Changes
#            - Describe the changes in this release.
#          draft: false
#          prerelease: true
#          token: ${{ secrets.GITHUB_TOKEN }}
#
#      # Step 3: Build APKs
#      - name: Build APKs
#        run: ./gradlew yourCustomTaskName
#
#      # Step 4: Attach APKs to the Release
#      - name: Upload APKs to Release
#        uses: softprops/action-gh-release@v2
#        with:
#          tag_name: ${{ inputs.version }}
#          files: |
#            app/build/outputs/apk/**/*.apk
#          token: ${{ secrets.GITHUB_TOKEN }}
