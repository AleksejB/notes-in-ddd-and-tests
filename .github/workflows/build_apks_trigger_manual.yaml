name: Create Release

on:
  workflow_dispatch:
    inputs:
      version:
        description: 'Version for the release (e.g., 1.2.3-rc1)'
        required: true
        type: string
      product_flavour:
        description: 'Comma-separated list of product flavours for the APK (e.g., staging,production)'
        required: false
        type: string
        default: 'staging'
      build_type:
        description: 'Build type for the APK (e.g., Release, Debug)'
        required: false
        type: string
        default: 'release'
      prerelease:
        description: 'Is this a pre release?'
        required: false
        type: boolean
        default: true

permissions:
  contents: write

jobs:
  release:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up JDK
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: '17'

      - name: Bump Version
        run: |
          VERSION_FILE=version.properties

          # Log the file contents before modifying
          echo "Current contents of $VERSION_FILE:"
          cat $VERSION_FILE

          # Increment VERSION_CODE by 1
          VERSION_CODE=$(grep 'VERSION_CODE=' $VERSION_FILE | cut -d '=' -f2)
          echo "Current VERSION_CODE: $VERSION_CODE"

          VERSION_CODE=$((VERSION_CODE + 1))
          echo "New VERSION_CODE: $VERSION_CODE"

          # Set VERSION_NAME to the supplied version
          VERSION_NAME="${{ inputs.version }}"

          # If the version starts with a 'v', remove it
          if [[ "$VERSION_NAME" == v* ]]; then
            VERSION_NAME="${VERSION_NAME:1}"
          fi
          echo "Setting VERSION_NAME to: $VERSION_NAME"

          # Update the version.properties file
          sed -i "s/^VERSION_CODE=.*/VERSION_CODE=$VERSION_CODE/" $VERSION_FILE 
          sed -i "s/^VERSION_NAME=.*/VERSION_NAME=$VERSION_NAME/" $VERSION_FILE

          # Log the new contents of the version.properties file
          echo "Updated contents of $VERSION_FILE:"
          cat $VERSION_FILE

          # Commit and push changes to version.properties
          git config --global user.name "github-actions"
          git config --global user.email "github-actions@github.com"
          git add $VERSION_FILE
          git commit -m "Bump version to $VERSION_NAME, increment VERSION_CODE to $VERSION_CODE"
          git push origin HEAD

      - name: Generate commands to generate APKs
        run: |
          PRODUCT_FLAVORS="${{ inputs.product_flavour }}"
          BUILD_TYPES="${{ inputs.build_type }}"

          TASKS=""
          for FLAVOR in $(echo $PRODUCT_FLAVORS | tr ',' ' '); do
            for TYPE in $(echo $BUILD_TYPES | tr ',' ' '); do
              TASKS="$TASKS assemble$(echo $FLAVOR | awk '{print toupper(substr($0,1,1)) tolower(substr($0,2))}')$(echo $TYPE | awk '{print toupper(substr($0,1,1)) tolower(substr($0,2))}')"
            done
          done

          echo "TASKS=$TASKS" >> $GITHUB_ENV

      - name: Get number of CPU cores
        uses: SimenB/github-actions-cpu-cores@v2
        id: cpu-cores

      - name: Calculate worker count
        shell: bash
        run: echo "workerCount=$(( ${{ steps.cpu-cores.outputs.count }} * 2 ))" >> $GITHUB_ENV

      - name: Run unit tests
        shell: bash
        id: test
        run: |
          ./gradlew ${{ env.TASKS }} \
          --no-daemon \
          --profile \
          -Dorg.gradle.daemon.idletimeout=15000 \
          -Dorg.gradle.workers.max=${{ env.workerCount }} \
          --stacktrace \
          --configuration-cache

      - name: Upload build reports
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: build-reports
          path: build/reports

      - name: Find Generated APKs
        id: find-apks
        run: |
          APK_PATHS=$(find app/build/outputs/apk -name "*.apk" | paste -sd "," -)
          echo "APK_PATHS=$APK_PATHS" >> $GITHUB_ENV

      - name: Create release if not exists and upload APKs
        uses: SoninApps/android_github_actions/.github/actions/create-release-if-not-exists@main
        with:
          version: ${{ inputs.version }}
          prerelease: ${{ inputs.prerelease }}
          apk_paths: ${{ env.APK_PATHS }}