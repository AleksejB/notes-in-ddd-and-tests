name: Attach APKs to release

on:
  release:
    types:
      - published

permissions:
  contents: write

jobs:
  release:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up JDK
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: '17'

      - name: Bump Version
        uses: AleksejB/notes-in-ddd-and-tests/.github/actions/bump-version-based-on-tag@master
        with:
          version: ${{ inputs.version }}
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Generate commands to generate APKs
        run: |
          RELEASE_NAME="${{ github.event.release.name }}"

          # Split release name into components
          IFS=' | ' read -r VERSION PRODUCT_FLAVORS BUILD_TYPES <<< "$RELEASE_NAME"

          echo "Extracted Version: $VERSION"
          echo "Extracted Product Flavours: $PRODUCT_FLAVORS"
          echo "Extracted Build Types: $BUILD_TYPES"

          TASKS=""
          for FLAVOR in $(echo "$PRODUCT_FLAVORS" | tr ',' ' '); do
            for TYPE in $(echo "$BUILD_TYPES" | tr ',' ' '); do
              TASK_NAME="assemble$(echo $FLAVOR | awk '{print toupper(substr($0,1,1)) tolower(substr($0,2))}')$(echo $TYPE | awk '{print toupper(substr($0,1,1)) tolower(substr($0,2))}')"
              TASKS="$TASKS $TASK_NAME"
            done
          done

          echo "Generated Gradle Tasks: $TASKS"
          echo "TASKS=$TASKS" >> $GITHUB_ENV

      - name: Get number of CPU cores
        uses: SimenB/github-actions-cpu-cores@v2
        id: cpu-cores

      - name: Calculate worker count
        shell: bash
        run: echo "workerCount=$(( ${{ steps.cpu-cores.outputs.count }} * 2 ))" >> $GITHUB_ENV

      - name: Generate APKs
        shell: bash
        id: test
        run: |
          echo "Running Gradle tasks: ${{ env.TASKS }}"

          ./gradlew ${{ env.TASKS }} \
          --no-daemon \
          --profile \
          -Dorg.gradle.daemon.idletimeout=15000 \
          -Dorg.gradle.workers.max=${{ env.workerCount }} \
          --stacktrace \
          --configuration-cache

      - name: Upload build reports
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: build-reports
          path: build/reports

      - name: Find Generated APKs
        id: find-apks
        run: |
          APK_PATHS=$(find app/build/outputs/apk -name "*.apk" | paste -sd "," -)
          echo "APK_PATHS=$APK_PATHS" >> $GITHUB_ENV

      - name: Check if release exists
        shell: bash
        run: |
          VERSION=${{ github.event.release.tag_name }}

          # Check if the version starts with 'v'
          if [[ "$VERSION" =~ ^v ]]; then
            TAG_NAME=$VERSION
            RELEASE_NAME=$VERSION
          else
            TAG_NAME="v$VERSION"
            RELEASE_NAME="v$VERSION"
          fi

          # Check if the release exists by querying the GitHub API
          RESPONSE=$(curl -s -o response.json -w "%{http_code}" \
            -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
            "https://api.github.com/repos/${{ github.repository }}/releases/tags/$TAG_NAME")

          if [[ "$RESPONSE" == "404" ]]; then
            echo "Release not found. Creating release for version $TAG_NAME..."

            # Create GitHub Release and store the response
            RELEASE_RESPONSE=$(curl -s \
              -X POST \
              -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
              -d '{
                "tag_name": "'"$TAG_NAME"'",
                "name": "'"$RELEASE_NAME"'",
                "body": "## Changes\n- Describe the changes in this release.",
                "draft": false,
                "prerelease": false
              }' \
              "https://api.github.com/repos/${{ github.repository }}/releases")

            # Extract release ID from response
            RELEASE_ID=$(echo "$RELEASE_RESPONSE" | jq -r '.id')
          else
            echo "Release for version $TAG_NAME already exists. Fetching ID..."
            RELEASE_ID=$(jq -r '.id' response.json)
          fi

          echo "Release ID: $RELEASE_ID"

          # Upload APKs if provided
          if [[ -n "${{ env.APK_PATHS }}" ]]; then
            IFS=',' read -r -a APK_ARRAY <<< "${{ env.APK_PATHS }}"

            for APK in "${APK_ARRAY[@]}"; do
              APK_PATH=$(echo $APK | xargs) # Trim spaces
              FILENAME=$(basename "$APK_PATH")

              echo "Uploading $FILENAME..."

              curl -s \
                -X POST \
                -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
                -H "Content-Type: application/vnd.android.package-archive" \
                --data-binary @"$APK_PATH" \
                "https://uploads.github.com/repos/${{ github.repository }}/releases/$RELEASE_ID/assets?name=$FILENAME"

              echo "$FILENAME uploaded successfully."
            done
          else
            echo "No APK paths provided. Skipping upload."
          fi